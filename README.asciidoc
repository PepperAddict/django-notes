= Introduction 

Now we're on the top of SQL, Models, and Migration. 
I think I'm already familiar, but I should watch and take notes anyway just to see if I can fill in some gaps.

He introduces us to SQLite which will store all its data into a single file. 

He tells us that each data that we store has its own type. Such as integers and string.. etc. 

== SQLite Types that it supports

* TEXT
* NUMERIC
* INTEGER
* REAL
* BLOB

== Create a table in SQLlite for flights

This is for creating the column tables.
We use `CREATE TABLE`

```
CREATE TABLE flights (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    origin TEXT NOT NULL,
    destination TEXT NOT NULL,
    duration INTEGER NOT NULL
)

```

== Add a row to a table

We use `INSERT INTO`

```
INSERT INTO flights
    (origin, destination, duration)
    VALUES ("New York", "London", 415)

```

INSERT INTO flights (origin, destination, duration) VALUES ("Shanghai", "Paris", 760);
INSERT INTO flights (origin, destination, duration) VALUES ("Istanbul", "Tokyo", 700);
INSERT INTO flights (origin, destination, duration) VALUES ("New York", "Paris", 435);
INSERT INTO flights (origin, destination, duration) VALUES ("Moscow", "Paris", 245);
INSERT INTO flights (origin, destination, duration) VALUES ("Lima", "New York", 455);

== Retrieve the data from table

We use `SELECT`

=== Below is retrieve all from flights

```
SELECT * FROM flights;
```

=== This select will give you the ones with these columns

```
SELECT origin, destination FROM flights;
```

=== Select only certain rows

selecting the id = 3 

```
SELECT * FROM flights WHERE id = 3;

```

or your can select where origin is new york

```
SELECT * FROM flights WHERE origin = "New York";
```

== Create a SQLlite database

In order to do that, all you need to do is create a file manually.

For this lesson, we're going to call it flights.sql

`touch flights.sql`

Now, to initiate it, `sqlite3 flights.sql` now you're able to write commands and it'll execute the code. 

First step is to type out the command to create the table, and in our lesson, we're creating a flights table. 

to confirm that the table has been created, type `.tables`

== We can make sqlite a bit more prettier by activating columns mode with headers. 

`.mode columns`

and 

`.headers yes`

And now it's better formatted

== Get origin only from one place 

in sqlite, we want only if origin is from new york

`SELECT * FROM flights WHERE origin = "New York";`

Should get 2 entries 

== We can add math to our query to get what we want or boolean

`SELECT * FROM flights WHERE duration > 500;`

Will look in our column duration and only give us greater than 500. 
Also give us two entries. 

== We can also give it an *and* 

`SELECT * FROM flights WHERE duration > 500 AND destination = "Paris";`

Now that will only give us only one result since both has to be true. 

== We can use *or* instead

`SELECT * FROM flights WHERE duration > 500 OR destination = "Paris";`

This will give us either one of those. Either if the duration is over 500 or if the destination is paris and give us those results. 

== check for these possible values 

`SELECT * FROM flights WHERE origin IN ("New York", "Lima");`

This works the same as *or*, but instead it checks in one column. 

== use like for getting a result by not typing it all out exactly

`SELECT * FROM flights WHERE origin LIKE "%a%"`

This will search in origin for any of the string value if it has an 'a' in it. 

== sql functions

there are functions you can perform on the table such as counting them all together. 

== update a row 

```
UPDATE flights SET duration = 430 WHERE origin = "New York" AND destination = "London";
```

== delete a row 

```
DELETE FROM flights WHERE destination = "Tokyo";
```

will remove all destination with destination to Tokyo. 

== foreign keys

We could link to other tables to reference information. 

== Starting django and database

Django deals with the sql stuff so first we're going to create a database model for django to deal with. 

You will find in your app a `models.py` file. 

Each model will be a python class. To create a model of our already sqlite setup, I used this:

```
class Flight(models.Model):
    origin = models.CharField(max_length=64)
    destination = models.CharField(max_length=64)
    duration = models.IntegerField()
```

To apply the changes, we have to migrate them. 
`python manage.py makemigrations`

Now we will see a file in our `app/migrations/0001_initial.py`
There, django generated the file to help work with that database. 

Now to actually apply the migration: 
`python manage.py migrate`

Now it has created a new file called `db.sqlite3` with the info 

== use python to modify the database

Now that we've created a special model for our database, we can interact with it with python. 

in console, 